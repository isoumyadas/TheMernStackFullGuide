.container {
  border: 2px solid rgb(89, 255, 0);
  display: grid;
  grid-template-columns: 120px 100px;
  grid-template-rows: 100px 100px 100px;
  gap: 23px;
  height: 100vh;
  width: 80vw;
  /* justify-items: center;
  align-items: center;
  justify-content: center;
  align-content: center; */
  place-items: center;
  place-content: center;
}

.item {
  border: 2px solid red;
  height: 55px;
  width: 55px;
}

/* grid doesn't behave like flex that will make content horizontal

grid-template-columns mean width
grid-template-rows mean height

*/

.item-4 {
  grid-row: 1/2;
  grid-column: 1/3;
  background-color: aquamarine;
}

.item-1 {
  grid-row: 1/2;
  grid-column: 1/3;
  /* alternative */
  /* grid-row-start, grid-row-end, grid-column-start, grid-column-end */
  background-color: rgb(164, 191, 182);
}

/* Naming the grid columns and rows */

/* 

  grid-template-columns: [pehla] 120px [doosra] 100px [t];
  grid-template-rows: [first] 100px [second] 300px;

  ** Then you can use **
  grid-row: phela/t;
  grid-column: first/second

  **fr**
  The available width of 1/3 space. because we've gave 1fr three times, if it was 1fr four times then it will be 1/4 space.

  grid-template-columns: 1fr 1fr 1fr; 
  
    and width is 80vw; 

  and if it was 1fr 2fr 1fr then it will take the space according to it -> 2fr will take 2x space of the given width.

  **Gap**

  gap: 23px -> this will give gap of row and column of 23px;

  you can also provide indiviual property too:
  gap-row: 23px;
  gap-column: 23px;

 ** never use padding in flex or grid use gap **

  justify-items: center;
  align-items: center;

    this helps to center the items in the container.

*/

/* Align-self: is used for individual cell to place vertically like column

and Justify-self: is used for individual cell to place horizontally like row.

**Repeat**

grid-template-columns: repeat(4, 1fr) -> repeat 4 times with 1fr, it will create 4 columns

minmax(100px, 1fr) -> minimum 100px and max 1fr

*/

.item-2 {
  align-self: start;
  /* justify-self: center; */
}

/* justify Content & align-content

  They are probably used for to move all grid items to align in container.

  It only works most probably if you have large container and your grid are small.

*/

/* Justify items and align items are used for inner Cell 

  Justify content and align content used when you've large space in your main container and you want to position the all grid items in specific direction

*/

/* Place Items & content 

  place-content will help to center,end,first the elements inside the main container.


  place-items: center; -> it behaves like justify&align items
  place-content: center; -> it behaves like justify&align content

*/
