> Here are only the concepts which is tricky and main as a concept.
> 

### Events

### 1. **Mouse Events**

Mouse events are triggered when a user interacts with the mouse or other pointing devices.

### **click**

- **When**: When a user clicks on an element.
- **Why**: Useful for triggering actions like submitting a form, navigating, or toggling UI elements (e.g., dropdowns).

### **dblclick**

- **When**: When a user double-clicks on an element.
- **Why**: Used to perform special actions like selecting text or opening a detailed view of an item.

### **mousedown**

- **When**: When the mouse button is pressed down.
- **Why**: Detect the start of a drag operation or initiate an animation as soon as the button is pressed.

### **mouseup**

- **When**: When the mouse button is released.
- **Why**: Often paired with `mousedown` to complete a drag operation or capture a click sequence.

### **mouseover**

- **When**: When the mouse pointer enters an element.
- **Why**: Display tooltips or highlight elements when hovered.

### **mouseout**

- **When**: When the mouse pointer leaves an element.
- **Why**: Hide tooltips or remove highlight effects.

### **mousemove**

- **When**: Whenever the mouse moves within an element.
- **Why**: Track the mouse position for drawing applications, games, or custom cursors.

### **contextmenu**

- **When**: When the right mouse button is clicked.
- **Why**: Show a custom context menu.

### 2. **Keyboard Events**

Keyboard events handle user input through a keyboard.

### **keydown**

- **When**: When a key is pressed down.
- **Why**: Detect key presses for shortcuts, navigation, or form control.
- Access key details: `event.key` (character) and `event.code` (physical key location).

### **keyup**

- **When**: When a key is released.
- **Why**: Use to finalize input or detect end of key combinations.

### **keypress** (deprecated)

- **When**: Fires when a key is pressed (deprecated in modern browsers).
- **Why**: Previously used to capture text input, now replaced by `keydown` and `keyup`.

---

### 3. **Form Events**

Form events manage interactions with forms and their elements.

### **submit**

- **When**: When a form is submitted.
- **Why**: Validate form inputs or send data via AJAX before the form is sent.

### **focus**

- **When**: When an element gains focus.
- **Why**: Highlight input fields or load relevant suggestions dynamically.

### **blur**

- **When**: When an element loses focus.
- **Why**: Validate input or close suggestions.

### **change**

- **When**: When a form element's value changes and the element loses focus (e.g., dropdown, checkbox).
- **Why**: Validate or update UI based on the user's selection.

### **input**

- **When**: When the value of an input field changes (fires immediately on input).
- **Why**: Live validation or updating the UI as the user types.

---

### 4. **Window Events**

These events are triggered at the window level and handle changes in the window's state.

### **load**

- **When**: When the entire page (including images, styles, etc.) is fully loaded.
- **Why**: Initialize scripts or start animations once the page is ready.

### **resize**

- **When**: When the window is resized.
- **Why**: Adjust the layout dynamically or recalculate positions of elements.

### **scroll**

- **When**: When the user scrolls the page.
- **Why**: Load additional content (infinite scroll), animate elements on scroll, or track scroll position.

### **beforeunload**

- **When**: When the user attempts to leave the page.
- **Why**: Warn the user about unsaved changes or confirm navigation.

### **error**

- **When**: When an error occurs during page load.
- **Why**: Log errors or show fallback UI to the use

/// ===========================================================

### Important Concepts

## **1. Event Type**

### **Concept**:

The `type` property of the event object represents the type of the event (e.g., `click`, `submit`, `keydown`).

### **Example**:

```html
html
Copy code
<button id="btn">Click Me</button>

<script>
  document.getElementById('btn').addEventListener('click', (event) => {
    console.log(`Event Type: ${event.type}`); // Logs: "Event Type: click"
  });
</script>

```

---

## **2. Event Timestamp**

### **Concept**:

The `timeStamp` property records the time (in milliseconds) from when the page loaded to when the event occurred.

### **Example**:

```jsx
javascript
Copy code
document.getElementById('btn').addEventListener('click', (event) => {
  console.log(`Event Timestamp: ${event.timeStamp}`); // Logs event timestamp
});

```

---

## **3. Default Prevented (`preventDefault`)**

### **Concept**:

The `preventDefault()` method prevents the default action associated with the event.

### **Use Case**:

Prevent form submission or link navigation.

### **Example**:

```html
html
Copy code
<a href="https://example.com" id="link">Go to Example</a>

<script>
  document.getElementById('link').addEventListener('click', (event) => {
    event.preventDefault(); // Prevents navigation
    console.log('Default action prevented.');
  });
</script>

```

---

## **4. Event Target**

### **Concept**:

The `target` property returns the element that triggered the event.

### **Example**:

```html
html
Copy code
<button id="btn">Click Me</button>

<script>
  document.body.addEventListener('click', (event) => {
    console.log(`Target Element:`, event.target); // Logs the clicked element
  });
</script>

```

---

## **5. Source Element and 6. To Element**

- **`srcElement` (or `target`)**: The element where the event originated (used in older versions of IE).
- **`toElement`**: The element the pointer moved to during events like `mouseover` and `mouseout`.

### **Example**:

```html
html
Copy code
<div id="div1" style="width:100px;height:100px;background:red;"></div>
<div id="div2" style="width:100px;height:100px;background:blue;"></div>

<script>
  document.getElementById('div1').addEventListener('mouseout', (event) => {
    console.log(`From: ${event.target.id}`); // div1
    console.log(`To: ${event.relatedTarget.id}`); // div2
  });
</script>

```

---

## **7. Current Target**

### **Concept**:

The `currentTarget` property refers to the element that the event listener is currently attached to.

### **Example**:

```html
html
Copy code
<div id="parent">
  <button id="child">Click Me</button>
</div>

<script>
  document.getElementById('parent').addEventListener('click', (event) => {
    console.log(`Current Target:`, event.currentTarget); // Logs parent
  });
</script>

```

---

## **Position-Related Properties**

### **1. `clientX` and `clientY`**

Returns the X and Y coordinates of the mouse pointer relative to the **viewport** (browser window).

### **Example**:

```html
html
Copy code
<button id="btn">Click Me</button>

<script>
  document.getElementById('btn').addEventListener('click', (event) => {
    console.log(`clientX: ${event.clientX}, clientY: ${event.clientY}`);
  });
</script>

```

---

### **2. `screenX` and `screenY`**

Returns the X and Y coordinates of the mouse pointer relative to the **entire screen**.

### **Example**:

```jsx
javascript
Copy code
document.getElementById('btn').addEventListener('click', (event) => {
  console.log(`screenX: ${event.screenX}, screenY: ${event.screenY}`);
});

```

---

### **3. `altKey`, `ctrlKey`, `shiftKey`**

Returns `true` if the corresponding key was pressed during the event.

### **Example**:

```jsx
javascript
Copy code
document.addEventListener('keydown', (event) => {
  console.log(`Alt: ${event.altKey}, Ctrl: ${event.ctrlKey}, Shift: ${event.shiftKey}`);
});

```

---

### **4. `keyCode` (Deprecated)**

- Represents the numeric code of the key pressed.
- Use `event.key` for modern usage.

### **Example**:

```jsx
javascript
Copy code
document.addEventListener('keydown', (event) => {
  console.log(`Key Code: ${event.keyCode}, Key: ${event.key}`);
});

```

---

## **Interactive Interview Questions**

1. **Identify mouse position relative to the viewport**:
    - Use `clientX` and `clientY`.
2. **Check if Ctrl key was pressed during a keydown**:
    - Use `ctrlKey`.
3. **Prevent form submission and log the target field's value**:
    - Use `preventDefault()` and `target.value`.